<?php

namespace DummyNamespace;

use App\Models\{{modelName}};
use App\Exceptions\GeneralException;
use Exception;
use Illuminate\Support\Facades\DB;
use SantosSabanari\LaravelFoundation\Services\BaseService;
use SantosSabanari\LaravelFoundation\Events\RoleCreated;
use SantosSabanari\LaravelFoundation\Events\RoleDeleted;
use SantosSabanari\LaravelFoundation\Events\RoleUpdated;

class {{modelName}}Service extends BaseService
{
    public function __construct({{modelName}} $role)
    {
        $this->model = $role;
    }

    public function store(array $data = []): {{modelName}}
    {
        DB::beginTransaction();

        try {
            $role = $this->model::create(['type' => $data['type'], 'name' => $data['name']]);
            $role->syncPermissions($data['permissions'] ?? []);
        } catch (Exception $e) {
            DB::rollBack();

            throw new GeneralException(__('There was a problem creating the role.'));
        }

        event(new {{modelName}}Created($role));

        DB::commit();

        return $role;
    }

    public function update({{modelName}} $role, array $data = []): Role
    {
        DB::beginTransaction();

        try {
            $role->update(['type' => $data['type'], 'name' => $data['name']]);
            $role->syncPermissions($data['permissions'] ?? []);
        } catch (Exception $e) {
            DB::rollBack();

            throw new GeneralException(__('There was a problem updating the role.'));
        }

        event(new {{modelName}}Updated($role));

        DB::commit();

        return $role;
    }

    public function destroy({{modelName}} $role): bool
    {
        if ($role->users()->count()) {
            throw new GeneralException(__('You can not delete a role with associated users.'));
        }

        if ($this->deleteById($role->id)) {
            event(new {{modelName}}Deleted($role));

            return true;
        }

        throw new GeneralException(__('There was a problem deleting the role.'));
    }
}
